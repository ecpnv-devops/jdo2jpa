#
# This YAML defines a structured, step-by-step guide to migrate classes and code from JDO-specific annotations
# to their JPA equivalents.
#
# The main recipe executes all recipes necessary to migrate from JDO to JPA.
#
# NOTE: The main recipe doesn't cover all possible JDO ORM mapping variations possible, but is restricted to most
#       common cases. Please feel free to extend the recipes with additional JDO mapping coverage.
#
# @author Patrick Deenen & Wouter Veltmaat @ Open Circle Solutions
#

---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x
displayName: Migrate from JDO to JPA v2.x
description: This main recipe migrates JDO applications using (Datanucleus) JDO to Java Persistence using JPA version v2.x (pre Jakarta persistence).
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
preconditions:
  - com.ecpnv.openrewrite.jdo2jpa.v2x.acceptOnlyEntitiesAndAnnotations
recipeList:
  # Pre code changes
  - com.ecpnv.openrewrite.java.RemoveTrailingComma
  # JDO to JPA migration
  - com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Persistent
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Column
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Unique
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Index
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Discriminator
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Inheritance
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Query
  # Post code changes
  - com.ecpnv.openrewrite.jdo2jpa.v2x.cleanup
  - org.openrewrite.java.ReplaceAnnotation:
      annotationPatternToReplace: '@javax.jdo.annotations.NotPersistent'
      annotationTemplateToInsert: '@javax.persistence.Transient'
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.acceptOnlyEntitiesAndAnnotations
displayName: Filter on spring configurations and entity classes
recipeList:
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.springframework.context.annotation.Configuration
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: javax.jdo.annotations.PersistenceCapable
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: javax.persistence.Entity
  - org.openrewrite.text.Find:
      find: "@interface"
      filePattern: "**/*.java"
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable
displayName: Migrate JDO > JPA-v2.x for @PersistenceCapable
description: Migrate @PersistenceCapable to @Entity and @Table.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - PersistenceCapable
recipeList:
  # NOTE: recipes without parameters are always run before recipes with parameters, hence when one depends on ordering
  #       one should wrap the recipes with parameters in a declarative one!
  - com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable.wrap1
  - com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable.wrap2
  - com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable.wrap3
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable.wrap1
displayName: Wrap recipes with parameters to maintain execution order
recipeList:
  - com.ecpnv.openrewrite.jdo2jpa.AddCommentToPersistenceCapableWithIdentityTypeApplication
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable.wrap2
displayName: Wrap recipes with parameters to maintain execution order
recipeList:
  - com.ecpnv.openrewrite.java.ExtendWithClassForAnnotationConditionally:
      annotationPattern: '@javax.jdo.annotations.PersistenceCapable'
      annotationCondition: 'identityType = IdentityType.DATASTORE'
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.DatastoreIdentity'
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.Version'
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@.*PersistenceCapable(.|\n|\s)*'
      annotationType: javax.persistence.Entity
      annotationTemplate: '@Entity'
      declarationType: CLASS
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable.wrap3
displayName: Wrap recipes with parameters to maintain execution order
recipeList:
  - com.ecpnv.openrewrite.jdo2jpa.ReplacePersistenceCapableWithTableAnnotation
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.PersistenceCapable'
  - com.ecpnv.openrewrite.java.MaybeRemoveImport:
      type: javax.jdo.annotations.IdentityType
  # Update spring configurations to include entity scanning
  - com.ecpnv.openrewrite.jdo2jpa.AddEntityScanAnnotationConditionally:
      entitySubPackageName: 'dom'
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Persistent
displayName: Migrate JDO > JPA-v2.x for @Persistent
description: Migrate @Persistent to @OneToMany and @Column.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Persistent
recipeList:
  - com.ecpnv.openrewrite.jdo2jpa.ReplacePersistentWithManyToOneAnnotation:
      defaultCascade: 'CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH'
  - com.ecpnv.openrewrite.jdo2jpa.ReplacePersistentWithOneToManyAnnotation:
      defaultCascade: 'CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH'
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Persistent
      attributeName: defaultFetchGroup
  - com.ecpnv.openrewrite.java.RemoveAnnotationWithoutAttributes:
      annotationType: '@javax.jdo.annotations.Persistent'
  - com.ecpnv.openrewrite.java.RemoveAnnotationWithoutAttributes:
      annotationType: '@javax.jdo.annotations.Column'
  # Replace @Order with @OrderColumn
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Order
      newFullyQualifiedTypeName: javax.persistence.OrderColumn
  # Rename column to name
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.persistence.OrderColumn
      oldAttributeName: column
      newAttributeName: name
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Column
displayName: Migrate JDO > JPA-v2.x for @Column
description: Migrate @Column.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Column
recipeList:
  # replace @Column(..allowsNull..) with @Column(..nullable..)
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.jdo.annotations.Column
      oldAttributeName: allowsNull
      newAttributeName: nullable
  # replace @Column(..allowsNull..) with @Column(..nullable..)
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.persistence.Column
      oldAttributeName: allowsNull
      newAttributeName: nullable
  # Remove nullable = "true" as this is the default in JPA
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@Column\((.|\s|\n)*nullable\s*=\s*"true"(.|\s|\n)*\)'
      annotationType: javax.jdo.annotations.Column
      attributeName: nullable
  # Remove nullable = "true" as this is the default in JPA
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@Column\((.|\s|\n)*nullable\s*=\s*"true"(.|\s|\n)*\)'
      annotationType: javax.persistence.Column
      attributeName: nullable
  # Change nullable = "false" to nullable = false
  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
      annotationType: javax.jdo.annotations.Column
      attributeName: nullable
      oldAttributeValue: "false"
      attributeValue: false
      operation: UPDATE
      appendArray: false
  # Change nullable = "false" to nullable = false
  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
      annotationType: javax.persistence.Column
      attributeName: nullable
      oldAttributeValue: "false"
      attributeValue: false
      operation: UPDATE
      appendArray: false
  # replace 'jdbcType = "CLOB", sqlType = "LONGVARCHAR"' with @Lob
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Column\((.|\s|\n)*jdbcType(.|\s|\n)*=(.|\s|\n)*"CLOB"(.|\s|\n)*\)'
      annotationType: javax.persistence.Lob
      annotationTemplate: '@Lob'
      declarationType: VAR
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Column\((.|\s|\n)*jdbcType(.|\s|\n)*=(.|\s|\n)*"CLOB"(.|\s|\n)*\)'
      annotationType: javax.persistence.Lob
      annotationTemplate: '@Lob'
      declarationType: METHOD
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Column\((.|\s|\n)*jdbcType(.|\s|\n)*=(.|\s|\n)*"CLOB"(.|\s|\n)*\)'
      annotationType: javax.persistence.Lob
      annotationTemplate: '@Lob'
      declarationType: CLASS
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Column
      attributeName: jdbcType
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Column
      attributeName: sqlType
  # Change column type
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Column
      newFullyQualifiedTypeName: javax.persistence.Column
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Unique
displayName: Migrate JDO > JPA-v2.x for @Unique
description: Migrate @Unique and @Uniques.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Unique
recipeList:
  # replace @Unique(..members..) with @Unique(..columnNames..)
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.jdo.annotations.Unique
      oldAttributeName: members
      newAttributeName: columnNames
  # remove unsupported attributes
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: table
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: deferred
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: columns
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: extensions
  # Change Unique type
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Unique
      newFullyQualifiedTypeName: javax.persistence.UniqueConstraint
  # Move annotation to other annotation attribute
  - com.ecpnv.openrewrite.java.MoveAnnotationsToAttribute:
      sourceAnnotationType: javax.persistence.UniqueConstraint
      targetAnnotationType: javax.persistence.Table
      targetAttributeName: uniqueConstraints
  # Remove @uniques
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.Uniques'
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Index
displayName: Migrate JDO > JPA-v2.x for @Index
description: Migrate @Index.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Index
recipeList:
  # Move @Index from field to class
  - com.ecpnv.openrewrite.java.MoveAnnotationFromFieldOrMethodToClass:
      annotationPattern: javax.jdo.annotations.Index
      attributeNameToAdd: columnList
  # replace @Index(..members..) with @Index(..columnList..)
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.jdo.annotations.Index
      oldAttributeName: members
      newAttributeName: columnList
  # remove unsupported attributes
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Index
      attributeName: table
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Index
      attributeName: columns
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Index
      attributeName: extensions
  # Remove unique = "false" as this is the default in JPA
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@.*Index\((.|\s|\n)*unique(.|\s|\n)*=(.|\s|\n)*"false"(.|\s|\n)*\)'
      annotationType: javax.jdo.annotations.Index
      attributeName: unique
  # Change Index type
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Index
      newFullyQualifiedTypeName: javax.persistence.Index
  # Join the column names in the array to comma separated string
  - com.ecpnv.openrewrite.java.JoinStringArrayAnnotationAttribute:
      annotationType: javax.persistence.Index
      attributeName: columnList
      delimiter: ", "
  # Move Index annotation to Table annotation attribute
  - com.ecpnv.openrewrite.java.MoveAnnotationsToAttribute:
      sourceAnnotationType: javax.persistence.Index
      targetAnnotationType: javax.persistence.Table
      targetAttributeName: indexes
  # Remove @Indices
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.Indices'
  - com.ecpnv.openrewrite.java.MaybeRemoveImport:
      type: javax.jdo.annotations.Indices
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Discriminator
displayName: Migrate JDO > JPA-v2.x for @Discriminator
description: Migrate @Discriminator and @DiscriminatorStrategy.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Discriminator
recipeList:
  # Translate discriminator strategy of class name to discriminator values with the names of the classes
  # by copying @Discriminator from parent class to subclasses when omitted and use the subclass name
  - com.ecpnv.openrewrite.jdo2jpa.CopyDiscriminatorFromParent
  # Add @DiscriminatorColumn for every @Discriminator
  # Set discriminator column name: discriminator
  # Set discriminator column length: 255
  # Note that from v5.0.2 DataNucleus will use a discriminator by default for inheritance strategy single table
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@.*Discriminator(.|\s|\n)*'
      annotationType: javax.persistence.DiscriminatorColumn
      annotationTemplate: '@DiscriminatorColumn( name = "discriminator", length = 255)'
      declarationType: CLASS
  # Change type of @Discriminator to @DiscriminatorValue
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Discriminator
      newFullyQualifiedTypeName: javax.persistence.DiscriminatorValue
  # Remove attributes which are not applicable
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: strategy
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: column
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: columns
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: indexed
  - com.ecpnv.openrewrite.java.MaybeRemoveImport:
      type: javax.jdo.annotations.DiscriminatorStrategy
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Inheritance
displayName: Migrate JDO > JPA-v2.x for @Inheritance
description: Migrate @Inheritance and @InheritanceStrategy.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Inheritance
recipeList:
  # Change inheritance strategy from SUBCLASS_TABLE to mapped superclass
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Inheritance\((.|\s|\n)*strategy(.|\s|\n)*=(.|\s|\n)*InheritanceStrategy.SUBCLASS_TABLE(.|\s|\n)*\)'
      annotationType: javax.persistence.MappedSuperclass
      annotationTemplate: '@MappedSuperclass'
      declarationType: CLASS
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.Inheritance(strategy=javax.jdo.annotations.InheritanceStrategy.SUBCLASS_TABLE)'
  # Remove @Inheritance from subclasses
  - com.ecpnv.openrewrite.java.RemoveInheritedAnnotations:
      nonInheritedAnnotationTypes:
        - javax.jdo.annotations.Inheritance
  # Copy javax.jdo.annotations.Inheritance#strategy to base class of inheritance hierarchy
  - com.ecpnv.openrewrite.java.CopyAnnotationAttributeFromSubclassToParentClass:
      annotationType: javax.jdo.annotations.Inheritance
      attributeToCopyToParent: strategy
      copyToBaseClassOnly: true
  # Change type of @Inheritance
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Inheritance
      newFullyQualifiedTypeName: javax.persistence.Inheritance
  # Set inheritance strategy to the causeway default: table_per_class(==new table) translates into JOINED
  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
      annotationType: javax.persistence.Inheritance
      attributeName: strategy
      oldAttributeValue: "null"
      attributeValue: javax.persistence.InheritanceType.JOINED
      operation: ADD
      appendArray: false
  # Change inheritance strategy from NEW_TABLE to JOINED
  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
      annotationType: javax.persistence.Inheritance
      attributeName: strategy
      oldAttributeValue: InheritanceStrategy.NEW_TABLE
      attributeValue: javax.persistence.InheritanceType.JOINED
      operation: UPDATE
      appendArray: false
  # Change inheritance strategy from SUPERCLASS_TABLE to SINGLE_TABLE
  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
      annotationType: javax.persistence.Inheritance
      attributeName: strategy
      oldAttributeValue: InheritanceStrategy.SUPERCLASS_TABLE
      attributeValue: javax.persistence.InheritanceType.SINGLE_TABLE
      operation: UPDATE
      appendArray: false
  # Change inheritance strategy from COMPLETE_TABLE to TABLE_PER_CLASS
  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
      annotationType: javax.persistence.Inheritance
      attributeName: strategy
      oldAttributeValue: InheritanceStrategy.COMPLETE_TABLE
      attributeValue: javax.persistence.InheritanceType.TABLE_PER_CLASS
      operation: UPDATE
      appendArray: false
  # Remove customStrategy
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.Inheritance
      attributeName: customStrategy
  - com.ecpnv.openrewrite.java.MaybeRemoveImport:
      type: javax.jdo.annotations.InheritanceStrategy
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Query
displayName: Migrate JDO > JPA-v2.x for @Query
description: Migrate @Queries and @Query.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - query
recipeList:
  # Change type @Queries to @NamedQueries
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Queries
      newFullyQualifiedTypeName: javax.persistence.NamedQueries
  # Rename attribute value to query
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.jdo.annotations.Query
      oldAttributeName: value
      newAttributeName: query
  # Change type of @Query for JDO to @Query for JPA
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Query
      newFullyQualifiedTypeName: javax.persistence.NamedQuery
  # Remove all unsupported attributes: unmodifiable, unique, fetchPlan, extensions
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.NamedQuery
      attributeName: unmodifiable
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.NamedQuery
      attributeName: unique
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.NamedQuery
      attributeName: fetchPlan
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.NamedQuery
      attributeName: extensions
  # Replace @NamedQuery with language=SQL with @NamedNativeQuery
  - com.ecpnv.openrewrite.java.ReplaceAnnotationConditionally:
      matchByRegularExpression: '@.*NamedQuery\((.|\s|\n)*language\s*=\s*"SQL"(.|\s|\n)*\)'
      annotationTemplateToInsert: '@javax.persistence.NamedNativeQuery'
  # Remove unsupported attribute language
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@.*NamedQuery\((.|\s|\n)*(language\s*=\s*"JDOQL")?(.|\s|\n)*\)'
      annotationType: javax.persistence.NamedQuery
      attributeName: language
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@.*NamedNativeQuery\((.|\s|\n)*language\s*=\s*"SQL"(.|\s|\n)*\)'
      annotationType: javax.persistence.NamedNativeQuery
      attributeName: language
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.NamedQuery
      attributeName: resultClass
  # Move @NamedNativeQuery
  - com.ecpnv.openrewrite.java.MoveAnnotationsToAttribute:
      sourceAnnotationType: javax.persistence.NamedNativeQuery
      targetAnnotationType: javax.persistence.NamedNativeQueries
      targetAttributeName: value
      skipWhenNoTargetAndAllOnClass: true
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.cleanup
displayName: Cleanup
description: Run cleanup.
tags:
  - cleanup
recipeList:
  - com.ecpnv.openrewrite.java.ShortenFullyQualifiedTypeReferencesConditionally:
      excludePackages: lombok,org.estatio.module.atpath.dom,org.incode.module.classification.dom.impl.category,org.estatio.module.asset.dom,org.incode.module.document.dom.impl.docs
  - com.ecpnv.openrewrite.jdo2jpa.RemovedUnusedImportsSpringSupport
# too soon
#  - org.openrewrite.java.format.AutoFormat
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.causeway
displayName: Causeway specific migrations
description: Causeway specific migrations to support JPA.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - causeway
recipeList:
  # Causeway uses the CausewayEntityListener to support JPA lifecycles
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@.*\bEntity\b.*'
      annotationType: javax.persistence.EntityListeners
      annotationTemplate: '@EntityListeners(org.apache.causeway.persistence.jpa.applib.integration.CausewayEntityListener.class)'
      declarationType: CLASS
  # Remove the properties with id one of [datanucleusVersionLong, datanucleusVersionTimestamp, datanucleusId]
  - com.ecpnv.openrewrite.xml.RemoveXmlTag:
      matchByRegularExpression: '.*property(.|\s|\n)*id(.|\s|\n)*datanucleusVersionLong(.|\s|\n)*'
      fileMatcher: '**/*.layout.xml'
  - com.ecpnv.openrewrite.xml.RemoveXmlTag:
      matchByRegularExpression: '.*property(.|\s|\n)*id(.|\s|\n)*datanucleusVersionTimestamp(.|\s|\n)*'
      fileMatcher: '**/*.layout.xml'
  - com.ecpnv.openrewrite.xml.RemoveXmlTag:
      matchByRegularExpression: '.*property(.|\s|\n)*id(.|\s|\n)*datanucleusId(.|\s|\n)*'
      fileMatcher: '**/*.layout.xml'
  # Remove the action with id downloadJdoMetadata
  - com.ecpnv.openrewrite.xml.RemoveXmlTag:
      matchByRegularExpression: '.*action(.|\s|\n)*id(.|\s|\n)*downloadJdoMetadata(.|\s|\n)*'
      fileMatcher: '**/*.layout.xml'
  # Remove the menu action JdoMetamodelMenu#downloadMetamodels
  - com.ecpnv.openrewrite.xml.RemoveXmlTag:
      matchByRegularExpression: '.*serviceAction(.|\s|\n)*objectType(.|\s|\n)*JdoMetamodelMenu(.|\s|\n)*'
      fileMatcher: '**/*.layout.xml'
