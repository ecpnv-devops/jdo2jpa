#
# This YAML defines a structured, step-by-step guide to migrate classes and code from JDO-specific annotations
# to their JPA equivalents.
#
# The main recipe executes all recipes necessary to migrate from JDO to JPA.
#
# NOTE: The main recipe doesn't cover all possible JDO ORM mapping variations possible, but is restricted to most
#       common cases. Please feel free to extend the recipes with additional JDO mapping coverage.
#
# @author Patrick Deenen @ Open Circle Solutions
# @author Wouter Veltmaat @ Open Circle Solutions
#

---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x
displayName: Migrate from JDO to JPA v2.x
description: This main recipe migrates JDO applications using (Datanucleus) JDO to Java Persistence using JPA version v2.x (pre Jakarta persistence).
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
preconditions:
  - com.ecpnv.openrewrite.jdo2jpa.v2x.acceptEntitiesAndServicesAndAnnotations
recipeList:
  # Pre code changes
  - com.ecpnv.openrewrite.java.RemoveTrailingComma
  # JDO to JPA migration
  - com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Unique
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Index
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Persistent
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Column
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Discriminator
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Inheritance
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Query
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Identity
  # Post code changes
  - org.openrewrite.java.ReplaceAnnotation:
      annotationPatternToReplace: '@javax.jdo.annotations.NotPersistent'
      annotationTemplateToInsert: '@javax.persistence.Transient'
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.acceptEntitiesAndServicesAndAnnotations
displayName: Filter on spring configurations, entity classes and some edge-cases
recipeList:
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.springframework.context.annotation.Configuration
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: javax.jdo.annotations.PersistenceCapable
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: javax.jdo.annotations.Discriminator
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: javax.persistence.Entity
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.springframework.stereotype.Service
  - org.openrewrite.text.Find:
      find: "@interface"
      filePattern: "**/*.java"
  - org.openrewrite.text.Find:
      find: "javax.jdo.annotations"
      filePattern: "**/*.java"
  # causeway specific filters
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.apache.causeway.applib.annotation.DomainObject
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.apache.causeway.applib.annotation.Property
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.apache.causeway.applib.annotation.Collection
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.apache.causeway.applib.annotation.Action
  # isis specific filters
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.apache.isis.applib.annotation.DomainObject
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.apache.isis.applib.annotation.Property
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.apache.isis.applib.annotation.Collection
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: org.apache.isis.applib.annotation.Action
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.acceptEntities
displayName: Filter on entity classes
recipeList:
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: javax.jdo.annotations.PersistenceCapable
  - org.openrewrite.java.search.FindTypes:
      fullyQualifiedTypeName: javax.persistence.Entity
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable
displayName: Migrate JDO > JPA-v2.x for @PersistenceCapable
description: Migrate @PersistenceCapable to @Entity and @Table.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - PersistenceCapable
recipeList:
  # NOTE: recipes without parameters are always run before recipes with parameters, hence when one depends on ordering
  #       one should wrap the recipes with parameters in a declarative one!
  - com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable.wrap1
  - com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable.wrap2
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable.wrap1
displayName: Wrap recipes with parameters to maintain execution order
recipeList:
  - com.ecpnv.openrewrite.java.ExtendWithClassForAnnotationConditionally:
      annotationPattern: '@javax.jdo.annotations.PersistenceCapable'
      annotationCondition: 'identityType = IdentityType.DATASTORE'
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.DatastoreIdentity'
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.Version'
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@.*PersistenceCapable(.|\n|\s)*'
      annotationType: javax.persistence.Entity
      annotationTemplate: '@Entity'
      declarationType: CLASS
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable.wrap2
displayName: Wrap recipes with parameters to maintain execution order
recipeList:
  - com.ecpnv.openrewrite.jdo2jpa.ReplacePersistenceCapableWithTableAnnotation
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.PersistenceCapable'
  - com.ecpnv.openrewrite.java.MaybeRemoveImport:
      type: javax.jdo.annotations.IdentityType
  # Update spring configurations to include entity scanning
  - com.ecpnv.openrewrite.jdo2jpa.AddEntityScanAnnotationConditionally
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Persistent
displayName: Migrate JDO > JPA-v2.x for @Persistent
description: Migrate @Persistent to @OneToMany and @Column.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Persistent
recipeList:
  - com.ecpnv.openrewrite.jdo2jpa.ReplacePersistentWithManyToOneAnnotation:
      defaultCascade: 'CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH'
  - com.ecpnv.openrewrite.jdo2jpa.ReplacePersistentWithOneToManyAnnotation:
      defaultCascade: 'CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH'
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Persistent
      attributeName: defaultFetchGroup
  - com.ecpnv.openrewrite.java.RemoveAnnotationWithoutAttributes:
      annotationType: '@javax.jdo.annotations.Persistent'
  - com.ecpnv.openrewrite.java.RemoveAnnotationWithoutAttributes:
      annotationType: '@javax.jdo.annotations.Column'
  # Replace @Order with @OrderColumn
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Order
      newFullyQualifiedTypeName: javax.persistence.OrderColumn
  # Rename column to name
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.persistence.OrderColumn
      oldAttributeName: column
      newAttributeName: name
  #  # Replace variables of type SortedSet with Set type and correct instance
  - com.ecpnv.openrewrite.jdo2jpa.ChangeTypesForAnnotatedVariables:
      annotationType: javax.persistence.OneToMany
      oldFullyQualifiedTypeNames: 'java.util.SortedSet'
      newFullyQualifiedTypeNames: 'java.util.TreeSet'
      ignoreMethods: true
  #  - com.ecpnv.openrewrite.jdo2jpa.ChangeTypeForClass:
  #      fullyQualifiedTypeName: org.estatio.module.codaproxy.dom._proj.ProjectionOwner
  #      oldFullyQualifiedTypeNames: 'java.util.SortedSet'
  #      newFullyQualifiedTypeNames: 'java.util.TreeSet'
  # Add sorted method to streams
  - com.ecpnv.openrewrite.jdo2jpa.AddSortedMethodToStreamMethods:
      annotationType: org.apache.isis.applib.annotation.Programmatic
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Column
displayName: Migrate JDO > JPA-v2.x for @Column
description: Migrate @Column.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Column
recipeList:
  # replace @Column(..allowsNull..) with @Column(..nullable..)
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.jdo.annotations.Column
      oldAttributeName: allowsNull
      newAttributeName: nullable
  # replace @Column(..allowsNull..) with @Column(..nullable..)
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.persistence.Column
      oldAttributeName: allowsNull
      newAttributeName: nullable
  # Remove nullable = "true" as this is the default in JPA
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@Column\((.|\s|\n)*nullable\s*=\s*"true"(.|\s|\n)*\)'
      annotationType: javax.jdo.annotations.Column
      attributeName: nullable
  # Remove nullable = "true" as this is the default in JPA
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@Column\((.|\s|\n)*nullable\s*=\s*"true"(.|\s|\n)*\)'
      annotationType: javax.persistence.Column
      attributeName: nullable
  # Change nullable = "false" to nullable = false
  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
      annotationType: javax.jdo.annotations.Column
      attributeName: nullable
      oldAttributeValue: "false"
      attributeValue: false
      operation: UPDATE
      appendArray: false
  # Change nullable = "false" to nullable = false
  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
      annotationType: javax.persistence.Column
      attributeName: nullable
      oldAttributeValue: "false"
      attributeValue: false
      operation: UPDATE
      appendArray: false
  # replace 'jdbcType = "CLOB", sqlType = "LONGVARCHAR"' with @Lob
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Column\((.|\s|\n)*jdbcType(.|\s|\n)*=(.|\s|\n)*"CLOB"(.|\s|\n)*\)'
      annotationType: javax.persistence.Lob
      annotationTemplate: '@Lob'
      declarationType: VAR
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Column\((.|\s|\n)*jdbcType(.|\s|\n)*=(.|\s|\n)*"CLOB"(.|\s|\n)*\)'
      annotationType: javax.persistence.Lob
      annotationTemplate: '@Lob'
      declarationType: METHOD
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Column\((.|\s|\n)*jdbcType(.|\s|\n)*=(.|\s|\n)*"CLOB"(.|\s|\n)*\)'
      annotationType: javax.persistence.Lob
      annotationTemplate: '@Lob'
      declarationType: CLASS
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Column
      attributeName: jdbcType
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Column
      attributeName: sqlType
  # Change column type
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Column
      newFullyQualifiedTypeName: javax.persistence.Column
# Can be used to track keywords of JPA attributes
#  - com.ecpnv.openrewrite.java.AddAnnotationNameAttributeForKeywords:
#      annotationType: "javax.persistence.Column"
#      attributeName: "name"
#      keywords: "key,user,value,values"
#      escapeString: "\\\""

---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Unique
displayName: Migrate JDO > JPA-v2.x for @Unique
description: Migrate @Unique and @Uniques.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Unique
recipeList:
  # Move @Unique from @Uniques to class
  - com.ecpnv.openrewrite.java.UnwrapAnnotationToClass:
      annotationPattern: javax.jdo.annotations.Unique
      removeParentAnnotation: true
  # Replace the field names in @Unique(..members..) with column names when @Column(..name..) is specified on the field
  - com.ecpnv.openrewrite.java.UpdateAnnotationAttributeFromFieldAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: members
      fieldAnnotationType: javax..Column
      fieldAttributeName: name
  # Replace the field names in @Unique(..members..) with column names when @JoinColumn(..name..) is specified on the field
  - com.ecpnv.openrewrite.java.UpdateAnnotationAttributeFromFieldAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: members
      fieldAnnotationType: javax..JoinColumn
      fieldAttributeName: name
  # replace @Unique(..members..) with @Unique(..columnNames..)
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.jdo.annotations.Unique
      oldAttributeName: members
      newAttributeName: columnNames
  # remove unsupported attributes
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: table
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: deferred
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: columns
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: extensions
  # Change Unique type
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Unique
      newFullyQualifiedTypeName: javax.persistence.UniqueConstraint
  # Move annotation to other annotation attribute
  - com.ecpnv.openrewrite.java.MoveAnnotationsToAttribute:
      sourceAnnotationType: javax.persistence.UniqueConstraint
      targetAnnotationType: javax.persistence.Table
      targetAttributeName: uniqueConstraints
  # Remove @uniques
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.Uniques'
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Index
displayName: Migrate JDO > JPA-v2.x for @Index
description: Migrate @Index.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Index
recipeList:
  # Move @Index from field to class
  - com.ecpnv.openrewrite.java.MoveAnnotationFromFieldOrMethodToClass:
      annotationPattern: javax.jdo.annotations.Index
      attributeNameToAdd: members
  # Move @Index from @Indices to class
  - com.ecpnv.openrewrite.java.UnwrapAnnotationToClass:
      annotationPattern: javax.jdo.annotations.Index
      removeParentAnnotation: true
  # Replace the field names in @Index(..members..) with column names when @Column(..name..) is specified on the field
  - com.ecpnv.openrewrite.java.UpdateAnnotationAttributeFromFieldAnnotationAttribute:
      annotationType: javax.jdo.annotations.Index
      attributeName: members
      fieldAnnotationType: javax..Column
      fieldAttributeName: name
  # Replace the field names in @Index(..members..) with column names when @JoinColumn(..name..) is specified on the field
  - com.ecpnv.openrewrite.java.UpdateAnnotationAttributeFromFieldAnnotationAttribute:
      annotationType: javax.jdo.annotations.Index
      attributeName: members
      fieldAnnotationType: javax..JoinColumn
      fieldAttributeName: name
  # replace @Index(..members..) with @Index(..columnList..)
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.jdo.annotations.Index
      oldAttributeName: members
      newAttributeName: columnList
  # remove unsupported attributes
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Index
      attributeName: table
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Index
      attributeName: columns
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Index
      attributeName: extensions
  # Remove unique = "false" as this is the default in JPA
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@.*Index\((.|\s|\n)*unique(.|\s|\n)*=(.|\s|\n)*"false"(.|\s|\n)*\)'
      annotationType: javax.jdo.annotations.Index
      attributeName: unique
  # Change Index type
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Index
      newFullyQualifiedTypeName: javax.persistence.Index
  # Join the column names in the array to comma separated string
  - com.ecpnv.openrewrite.java.JoinStringArrayAnnotationAttribute:
      annotationType: javax.persistence.Index
      attributeName: columnList
      delimiter: ", "
  # Move Index annotation to Table annotation attribute
  - com.ecpnv.openrewrite.java.MoveAnnotationsToAttribute:
      sourceAnnotationType: javax.persistence.Index
      targetAnnotationType: javax.persistence.Table
      targetAttributeName: indexes
  # Remove @Indices
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.Indices'
  - com.ecpnv.openrewrite.java.MaybeRemoveImport:
      type: javax.jdo.annotations.Indices
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Discriminator
displayName: Migrate JDO > JPA-v2.x for @Discriminator
description: Migrate @Discriminator and @DiscriminatorStrategy.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Discriminator
recipeList:
  # Translate discriminator strategy of class name to discriminator values with the names of the classes
  # by copying @Discriminator from parent class to subclasses when omitted and use the subclass name
  - com.ecpnv.openrewrite.jdo2jpa.CopyDiscriminatorFromParent
  # Add @DiscriminatorColumn for every @Discriminator or @Inheritance
  # Set discriminator column name: discriminator
  # Set discriminator column length: 255
  # Note that from v5.0.2 DataNucleus will use a discriminator by default for inheritance strategy single table
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@.*(Discriminator|Inheritance)(.|\s|\n)*'
      annotationType: javax.persistence.DiscriminatorColumn
      annotationTemplate: '@DiscriminatorColumn( name = "discriminator", length = 255)'
      declarationType: CLASS
  # Change type of @Discriminator to @DiscriminatorValue
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Discriminator
      newFullyQualifiedTypeName: javax.persistence.DiscriminatorValue
  # Remove attributes which are not applicable
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: strategy
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: column
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: columns
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: indexed
  - com.ecpnv.openrewrite.java.MaybeRemoveImport:
      type: javax.jdo.annotations.DiscriminatorStrategy
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Inheritance
displayName: Migrate JDO > JPA-v2.x for @Inheritance
description: Migrate @Inheritance and @InheritanceStrategy.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Inheritance
recipeList:
  # Move @Inheritance to parent when parent is not an object
  - com.ecpnv.openrewrite.java.CopyAnnotationToSuper:
      move: true
      annotationTypes:
        - javax.jdo.annotations.Inheritance
      typesToStopAt:
        - java.lang.Object
        - org.estatio.base.prod.dom.EntityAbstract
  # Change inheritance strategy from SUBCLASS_TABLE to mapped superclass
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Inheritance\((.|\s|\n)*strategy(.|\s|\n)*=(.|\s|\n)*InheritanceStrategy.SUBCLASS_TABLE(.|\s|\n)*\)'
      annotationType: javax.persistence.MappedSuperclass
      annotationTemplate: '@MappedSuperclass'
      declarationType: CLASS
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.Inheritance(strategy=javax.jdo.annotations.InheritanceStrategy.SUBCLASS_TABLE)'
  # Remove @Inheritance from subclasses
  - com.ecpnv.openrewrite.java.RemoveInheritedAnnotations:
      nonInheritedAnnotationTypes:
        - javax.jdo.annotations.Inheritance
  # Copy javax.jdo.annotations.Inheritance#strategy to base class of inheritance hierarchy
  - com.ecpnv.openrewrite.java.CopyAnnotationAttributeFromSubclassToParentClass:
      annotationType: javax.jdo.annotations.Inheritance
      attributeToCopyToParent: strategy
      copyToBaseClassOnly: true
  # Set inheritance strategy to the causeway default: table_per_class(==new table) translates into JOINED
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Inheritance\s*\(\s*(?!(.|\s)*strategy)(.|\s)*?\)'
      annotationType: javax.jdo.annotations.Inheritance
      annotationTemplate: '@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)'
      declarationType: CLASS
  # Change inheritance strategy from NEW_TABLE to JOINED
  - org.openrewrite.java.ReplaceAnnotation:
      annotationPatternToReplace: '@javax.jdo.annotations.Inheritance(strategy=javax.jdo.annotations.InheritanceStrategy.NEW_TABLE)'
      annotationTemplateToInsert: '@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.JOINED)'
  # Change inheritance strategy from SUPERCLASS_TABLE to SINGLE_TABLE
  - org.openrewrite.java.ReplaceAnnotation:
      annotationPatternToReplace: '@javax.jdo.annotations.Inheritance(strategy=javax.jdo.annotations.InheritanceStrategy.SUPERCLASS_TABLE)'
      annotationTemplateToInsert: '@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.SINGLE_TABLE)'
  # Change inheritance strategy from COMPLETE_TABLE to TABLE_PER_CLASS
  - org.openrewrite.java.ReplaceAnnotation:
      annotationPatternToReplace: '@javax.jdo.annotations.Inheritance(strategy=javax.jdo.annotations.InheritanceStrategy.COMPLETE_TABLE)'
      annotationTemplateToInsert: '@javax.persistence.Inheritance(strategy = javax.persistence.InheritanceType.TABLE_PER_CLASS)'
  # Remove customStrategy
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.Inheritance
      attributeName: customStrategy
  # Remove imports of replaced annotations
  - com.ecpnv.openrewrite.java.MaybeRemoveImport:
      type: javax.jdo.annotations.InheritanceStrategy
  - com.ecpnv.openrewrite.java.MaybeRemoveImport:
      type: javax.jdo.annotations.Inheritance
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Query
displayName: Migrate JDO > JPA-v2.x for @Query
description: Migrate @Queries and @Query.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - query
recipeList:
  # Change type @Queries to @NamedQueries
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Queries
      newFullyQualifiedTypeName: javax.persistence.NamedQueries
  # Rename attribute value to query
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.jdo.annotations.Query
      oldAttributeName: value
      newAttributeName: query
  # Change type of @Query for JDO to @Query for JPA
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Query
      newFullyQualifiedTypeName: javax.persistence.NamedQuery
  # Remove all unsupported attributes: unmodifiable, unique, fetchPlan, extensions
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.NamedQuery
      attributeName: unmodifiable
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.NamedQuery
      attributeName: unique
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.NamedQuery
      attributeName: fetchPlan
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.NamedQuery
      attributeName: extensions
  # Replace @NamedQuery with language=SQL with @NamedNativeQuery
  - com.ecpnv.openrewrite.java.ReplaceAnnotationConditionally:
      matchByRegularExpression: '@.*NamedQuery\((.|\s|\n)*language\s*=\s*"SQL"(.|\s|\n)*\)'
      annotationTemplateToInsert: '@javax.persistence.NamedNativeQuery'
  # Remove unsupported attribute language
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@.*NamedQuery\((.|\s|\n)*(language\s*=\s*"JDOQL")?(.|\s|\n)*\)'
      annotationType: javax.persistence.NamedQuery
      attributeName: language
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@.*NamedNativeQuery\((.|\s|\n)*language\s*=\s*"SQL"(.|\s|\n)*\)'
      annotationType: javax.persistence.NamedNativeQuery
      attributeName: language
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.NamedQuery
      attributeName: resultClass
  # Move @NamedNativeQuery
  - com.ecpnv.openrewrite.java.MoveAnnotationsToAttribute:
      sourceAnnotationType: javax.persistence.NamedNativeQuery
      targetAnnotationType: javax.persistence.NamedNativeQueries
      targetAttributeName: value
      skipWhenNoTargetAndAllOnClass: true
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Identity
displayName: Migrate JDO > JPA-v2.x for @Id
description: Migrate @Queries and @Query.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - identity
preconditions:
  - org.openrewrite.java.search.DoesNotUseType:
      fullyQualifiedTypeName: org.estatio.base.prod.dom.EntityAbstract
recipeList:
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.PrimaryKey
      newFullyQualifiedTypeName: javax.persistence.Id
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.BestPractices.OneToMany
displayName: Apply best practices for JPA one to many relationships
description: Apply best practices for JPA.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - jpa
recipeList:
  # Use specific getters and setters for bi-directional OneToMany relationships
  # Add addToXyz( type element) and removeFromXyz(type element) where Xyz is a collection of type
  - com.ecpnv.openrewrite.java.AddMethodToVariableDeclarationConditionally:
      regularExpression: '(@.*Persistent\(.*mappedBy.*)|(@.*OneToMany\(.*mappedBy.*)'
      methodTemplateString: '@Programmatic 
      public void removeFrom$varNameC$($varGType$ element){
        $varName$.remove(element);
        element.set$className$(null);
      }'
      fullyQualifiedType: java.util.Collection
      maybeImportTypes:
        - org.apache.isis.applib.annotation.Programmatic
  - com.ecpnv.openrewrite.java.AddMethodToVariableDeclarationConditionally:
      regularExpression: '(@.*Persistent\(.*mappedBy.*)|(@.*OneToMany\(.*mappedBy.*)'
      methodTemplateString: '@Programmatic 
      public void addTo$varNameC$($varGType$ element){
        element.set$className$(this);
        $varName$.add(element);
      }'
      fullyQualifiedType: java.util.Collection
      maybeImportTypes:
        - org.apache.isis.applib.annotation.Programmatic
  # Remove Lombok @Getter from bi-directional OneToMany relationships
  - com.ecpnv.openrewrite.java.RemoveAnnotationConditionally:
      matchByRegularExpression: '(@.*Persistent\(.*mappedBy.*)|(@.*OneToMany\(.*mappedBy.*)'
      matchByRegularExpressionForRemoval: '@.*Getter.*'
      fullyQualifiedType: java.util.Collection
      declarationType: VAR
  # Remove Lombok @Setter from bi-directional OneToMany relationships
  - com.ecpnv.openrewrite.java.RemoveAnnotationConditionally:
      matchByRegularExpression: '(@.*Persistent\(.*mappedBy.*)|(@.*OneToMany\(.*mappedBy.*)'
      matchByRegularExpressionForRemoval: '(@.*Setter.*)|(@lombok\.Setter.*)'
      fullyQualifiedType: java.util.Collection
      declarationType: VAR
  # Add streamXyz method where Xyz is a collection of type
  - com.ecpnv.openrewrite.java.AddMethodToVariableDeclarationConditionally:
      regularExpression: '(@.*Persistent\(.*mappedBy.*)|(@.*OneToMany\(.*mappedBy.*)'
      methodTemplateString: '@Programmatic 
      public Stream<$varGType$> stream$varNameC$(){
        return new ArrayList<>($varName$).stream();
      }'
      fullyQualifiedType: java.util.Collection
      maybeImportTypes:
        - java.util.stream.Stream
        - java.util.ArrayList
        - org.apache.isis.applib.annotation.Programmatic
  # Add getXyz method where Xyz is a collection of type
  - com.ecpnv.openrewrite.java.AddMethodToVariableDeclarationConditionally:
      regularExpression: '(@.*Persistent\(.*mappedBy.*)|(@.*OneToMany\(.*mappedBy.*)'
      methodTemplateString: '@Programmatic 
      public Collection<$varGType$> get$varNameC$(){
        return Collections.unmodifiableCollection($varName$);
      }'
      fullyQualifiedType: java.util.Collection
      maybeImportTypes:
        - java.util.Collection
        - java.util.Collections
        - org.apache.isis.applib.annotation.Programmatic
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.causeway
displayName: Causeway specific migrations
description: Causeway specific migrations to support JPA.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - causeway
  - isis
recipeList:
  # Causeway uses the CausewayEntityListener to support JPA lifecycles
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@.*\bEntity'
      annotationType: javax.persistence.EntityListeners
      # the old causeway name 'iris' is still being used
      annotationTemplate: '@EntityListeners(org.apache.isis.persistence.jpa.applib.integration.IsisEntityListener.class)'
      #      annotationTemplate: '@EntityListeners(org.apache.causeway.persistence.jpa.applib.integration.CausewayEntityListener.class)'
      declarationType: CLASS
      disallowedModifierType: Abstract
      allowInherited: false
  # Remove the properties with id one of [datanucleusVersionLong, datanucleusVersionTimestamp, datanucleusId]
  - com.ecpnv.openrewrite.xml.RemoveXmlTag:
      matchByRegularExpression: '.*property(.|\s|\n)*id(.|\s|\n)*datanucleusVersionLong(.|\s|\n)*'
      fileMatcher: '**/*.layout.xml'
  - com.ecpnv.openrewrite.xml.RemoveXmlTag:
      matchByRegularExpression: '.*property(.|\s|\n)*id(.|\s|\n)*datanucleusVersionTimestamp(.|\s|\n)*'
      fileMatcher: '**/*.layout.xml'
  - com.ecpnv.openrewrite.xml.RemoveXmlTag:
      matchByRegularExpression: '.*property(.|\s|\n)*id(.|\s|\n)*datanucleusId(.|\s|\n)*'
      fileMatcher: '**/*.layout.xml'
  # Remove the action with id downloadJdoMetadata
  - com.ecpnv.openrewrite.xml.RemoveXmlTag:
      matchByRegularExpression: '.*action(.|\s|\n)*id(.|\s|\n)*downloadJdoMetadata(.|\s|\n)*'
      fileMatcher: '**/*.layout.xml'
  # Remove the menu action JdoMetamodelMenu#downloadMetamodels
  - com.ecpnv.openrewrite.xml.RemoveXmlTag:
      matchByRegularExpression: '.*serviceAction(.|\s|\n)*objectType(.|\s|\n)*JdoMetamodelMenu(.|\s|\n)*'
      fileMatcher: '**/*.layout.xml'
  # Replace Jdo modules with Jpa modules with causeway naming instead of isis
  # Note: that org.apache.causeway.persistence.jdo.datanucleus.CausewayModulePersistenceJdoDatanucleusMixins has to be removed
  #       manually as there is no Jpa alternative
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.extensions.executionlog.jdo.CausewayModuleExtExecutionLogPersistenceJdo
      newFullyQualifiedTypeName: org.apache.causeway.extensions.executionlog.jpa.CausewayModuleExtExecutionLogPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.extensions.commandlog.jdo.CausewayModuleExtCommandLogPersistenceJdo
      newFullyQualifiedTypeName: org.apache.causeway.extensions.commandlog.jpa.CausewayModuleExtCommandLogPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.extensions.secman.jdo.CausewayModuleExtSecmanPersistenceJdo
      newFullyQualifiedTypeName: org.apache.causeway.extensions.secman.jpa.CausewayModuleExtSecmanPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.extensions.secman.jdo.util.RegexReplacer
      newFullyQualifiedTypeName: org.apache.causeway.extensions.secman.jpa.util.RegexReplacer
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.persistence.jdo.datanucleus.CausewayModulePersistenceJdoDatanucleus
      newFullyQualifiedTypeName: org.apache.causeway.persistence.jpa.eclipselink.CausewayModulePersistenceJpaEclipselink
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.persistence.jdo.applib.CausewayModulePersistenceJdoApplib
      newFullyQualifiedTypeName: org.apache.causeway.persistence.jpa.applib.CausewayModulePersistenceJpaApplib
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.extensions.executionoutbox.jdo.CausewayModuleExtExecutionOutboxPersistenceJdo
      newFullyQualifiedTypeName: org.apache.causeway.extensions.executionoutbox.jpa.CausewayModuleExtExecutionOutboxPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.extensions.audittrail.jdo.CausewayModuleExtAuditTrailPersistenceJdo
      newFullyQualifiedTypeName: org.apache.causeway.extensions.audittrail.jpa.CausewayModuleExtAuditTrailPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.extensions.sessionlog.jdo.CausewayModuleExtSessionLogPersistenceJdo
      newFullyQualifiedTypeName: org.apache.causeway.extensions.sessionlog.jpa.CausewayModuleExtSessionLogPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.extensions.audittrail.jdo.CausewayModuleExtAuditTrailPersistenceJdo
      newFullyQualifiedTypeName: org.apache.causeway.extensions.audittrail.jpa.CausewayModuleExtAuditTrailPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.valuetypes.asciidoc.persistence.jdo.CausewayModuleValAsciidocPersistenceJdo
      newFullyQualifiedTypeName: org.apache.causeway.valuetypes.asciidoc.persistence.jpa.CausewayModuleValAsciidocPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.causeway.testing.fixtures.applib.teardown.jdo.TeardownFixtureJdoAbstract
      newFullyQualifiedTypeName: org.apache.causeway.testing.fixtures.applib.teardown.jpa.TeardownFixtureJpaAbstract
  # Replace Jdo modules with Jpa modules with isis naming instead of causeway
  # Note: that org.apache.isis.persistence.jdo.datanucleus.IsisModulePersistenceJdoDatanucleusMixins has to be removed
  #       manually as there is no Jpa alternative
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.extensions.executionlog.jdo.IsisModuleExtExecutionLogPersistenceJdo
      newFullyQualifiedTypeName: org.apache.isis.extensions.executionlog.jpa.IsisModuleExtExecutionLogPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.extensions.commandlog.jdo.IsisModuleExtCommandLogPersistenceJdo
      newFullyQualifiedTypeName: org.apache.isis.extensions.commandlog.jpa.IsisModuleExtCommandLogPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.extensions.secman.jdo.IsisModuleExtSecmanPersistenceJdo
      newFullyQualifiedTypeName: org.apache.isis.extensions.secman.jpa.IsisModuleExtSecmanPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.extensions.secman.jdo.util.RegexReplacer
      newFullyQualifiedTypeName: org.apache.isis.extensions.secman.jpa.util.RegexReplacer
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.persistence.jdo.datanucleus.IsisModulePersistenceJdoDatanucleus
      newFullyQualifiedTypeName: org.apache.isis.persistence.jpa.eclipselink.IsisModulePersistenceJpaEclipselink
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.persistence.jdo.applib.IsisModulePersistenceJdoApplib
      newFullyQualifiedTypeName: org.apache.isis.persistence.jpa.applib.IsisModulePersistenceJpaApplib
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.extensions.executionoutbox.jdo.IsisModuleExtExecutionOutboxPersistenceJdo
      newFullyQualifiedTypeName: org.apache.isis.extensions.executionoutbox.jpa.IsisModuleExtExecutionOutboxPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.extensions.audittrail.jdo.IsisModuleExtAuditTrailPersistenceJdo
      newFullyQualifiedTypeName: org.apache.isis.extensions.audittrail.jpa.IsisModuleExtAuditTrailPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.extensions.sessionlog.jdo.IsisModuleExtSessionLogPersistenceJdo
      newFullyQualifiedTypeName: org.apache.isis.extensions.sessionlog.jpa.IsisModuleExtSessionLogPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.extensions.audittrail.jdo.IsisModuleExtAuditTrailPersistenceJdo
      newFullyQualifiedTypeName: org.apache.isis.extensions.audittrail.jpa.IsisModuleExtAuditTrailPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.valuetypes.asciidoc.persistence.jdo.IsisModuleValAsciidocPersistenceJdo
      newFullyQualifiedTypeName: org.apache.isis.valuetypes.asciidoc.persistence.jpa.IsisModuleValAsciidocPersistenceJpa
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: org.apache.isis.testing.fixtures.applib.teardown.jdo.TeardownFixtureJdoAbstract
      newFullyQualifiedTypeName: org.apache.isis.testing.fixtures.applib.teardown.jpa.TeardownFixtureJpaAbstract
  # Remove all types because there are none in Causeway JPA
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@org.apache.causeway.persistence.jdo.applib.types..*'
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@org.apache.isis.persistence.jdo.applib.types..*'
  # Extend specific classes
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.incode.module.document.dom.impl.paperclips.Paperclip
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.estatio.module.numerator.integtests.dom.NumeratorExampleObject
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.incode.module.communications.integtests.demo.dom.demowithnotes.DemoObjectWithNotes
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.incode.platform.dom.docfragment.integtests.demo.dom.invoicewithatpath.DemoInvoiceWithAtPath
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.incode.module.communications.integtests.demo.dom.invoice.DemoInvoice
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.incode.platform.dom.docfragment.integtests.demo.dom.customer.DemoCustomer
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.incode.module.classification.integtests.ClassificationForTaxForTesting
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.incode.module.classification.dom.impl.classification.Classification
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.estatio.module.task.dom.state.StateTransitionAbstract
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.estatio.integration.orchestration.dom.OrchestrationAbstract
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.estatio.module.asset.dom.Site
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.estatio.module.asset.dom.tax.PropertyTaxForUnit
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.estatio.module.asset.dom.registration.LandRegistration
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.estatio.module.assetfinancial.dom.FixedAssetFinancialAccount
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.estatio.module.asset.dom.energylabel.EnergyPerformanceCertification
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.incode.module.document.dom.impl.types.DocumentType
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.incode.module.docfragment.dom.impl.DocFragment
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.incode.module.communications.dom.impl.comms.Communication
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  - com.ecpnv.openrewrite.java.ExtendWithClassForClass:
      fullClassName: org.estatio.module.agreement.dom.AgreementRoleCommunicationChannelType
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
  #
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Named\(InvoiceSummary\.LOGICAL_TYPE_NAMED\)'
      annotationType: javax.persistence.IdClass
      annotationTemplate: '@IdClass(InvoiceSummaryId.class)'
      declarationType: CLASS
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@.*Import\(.(.|\n|\s)*BackgroundCommandsOrchestration.class(.|\n|\s)*.\)'
      annotationType: org.springframework.boot.autoconfigure.domain.EntityScan
      annotationTemplate: '@EntityScan({"org.estatio.integration.orchestration.dom"})'
      declarationType: CLASS
  # fix some annotations
  - org.openrewrite.java.ReplaceAnnotation:
      annotationPatternToReplace: '@javax.jdo.annotations.PrimaryKey'
      annotationTemplateToInsert: '@javax.persistence.Id'
  - org.openrewrite.java.ReplaceAnnotation:
      annotationPatternToReplace: '@javax.jdo.annotations.NotPersistent'
      annotationTemplateToInsert: '@javax.persistence.Transient'
  - com.ecpnv.openrewrite.jdo2jpa.AddAnnotationToChildrenConditionally:
      fullClassName: 'org.estatio.module.amendment.dom.LeaseAmendmentItem'
      annotationPattern: 'lombok.NoArgsConstructor'
  - com.ecpnv.openrewrite.jdo2jpa.AddAnnotationToChildrenConditionally:
      fullClassName: 'org.estatio.module.budget.dom.keyitem.KeyItem'
      annotationPattern: 'lombok.NoArgsConstructor'
  - com.ecpnv.openrewrite.jdo2jpa.AddAnnotationToChildrenConditionally:
      fullClassName: 'org.estatio.module.lease.imports.persistedimports.AuditedTurnoverRentImport'
      annotationPattern: 'lombok.NoArgsConstructor'
  - com.ecpnv.openrewrite.jdo2jpa.AddAnnotationToChildrenConditionally:
      fullClassName: 'org.estatio.module.party.dom.permit.Permit'
      annotationPattern: 'lombok.NoArgsConstructor'
  - com.ecpnv.openrewrite.java.ReplaceLinkInComment:
      fullClassNameToReplace: 'javax.jdo.annotations.NotPersistent'
      fullClassNameToInsert: 'javax.persistence.Transient'
  - com.ecpnv.openrewrite.java.AddAnnotationToClassVariable:
      variableTypeRegex: 'com.ecpnv.platform.subdomains.base.applib.with.WithIntervalContiguous.Helper.*'
      annotationType: 'javax.persistence.Transient'
      annotationTemplateToInsert: '@Transient'
  - com.ecpnv.openrewrite.java.AddAnnotationToClassVariable:
      variableTypeRegex: 'com.ecpnv.platform.subdomains.base.applib.with.WithIntervalMutable.Helper.*'
      annotationType: 'javax.persistence.Transient'
      annotationTemplateToInsert: '@Transient'
  # Adds missing imports that somehow dissappeared
  - com.ecpnv.openrewrite.java.AddImport:
      fullClassName: 'org.estatio.module.asset.dom.unitlink.UnitLink'
      importFullClassName: 'javax.persistence.UniqueConstraint'
  - com.ecpnv.openrewrite.java.AddImport:
      fullClassName: 'org.estatio.module.capex.dom.codamapping.CodaMapping'
      importFullClassName: 'javax.persistence.UniqueConstraint'
  - com.ecpnv.openrewrite.java.AddImport:
      fullClassName: 'org.estatio.integration.gotenbergfake.dom.FakeGotenbergClientService'
      importFullClassName: 'com.ecpnv.platform.subdomains.base.applib.utils.ResourceUtil'
  - com.ecpnv.openrewrite.java.AddImport:
      fullClassName: 'org.estatio.module.codaorchestrationpaymentproposal.dom.codapayproposal.CodaPayProposalService_Test'
      importFullClassName: 'org.junit.jupiter.api.extension.ExtendWith'
  - com.ecpnv.openrewrite.java.AddImport:
      fullClassName: 'org.estatio.module.codaorchestrationpaymentproposal.dom.codapayproposal.CodaPayProposalService_Test'
      importFullClassName: 'org.mockito.junit.jupiter.MockitoExtension'
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.post.causeway
displayName: Migrations after Causeway
description: Migrations after Causeway.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - causeway
  - isis
preconditions:
  - com.ecpnv.openrewrite.jdo2jpa.v2x.acceptEntitiesAndServicesAndAnnotations
recipeList:
  # Inherited classes also need Entity annotation because of QueryDSL
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@.*Inheritance(.|\n|\s)*'
      annotationType: javax.persistence.Entity
      annotationTemplate: '@Entity'
      declarationType: CLASS
  # add eclipselink customizers
  #  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
  #      matchByRegularExpression: '@Table\(schema = InvoiceItem.SCHEMA(.|\n|\s)*\)'
  #      annotationType: org.eclipse.persistence.annotations.Customizer
  #      annotationTemplate: '@Customizer(InvoiceItemCustomizer.class)'
  #      declarationType: CLASS
  #  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
  #      matchByRegularExpression: '@Table\(schema = Invoice.SCHEMA(.|\n|\s)*'
  #      annotationType: org.eclipse.persistence.annotations.Customizer
  #      annotationTemplate: '@Customizer(InvoiceCustomizer.class)'
  #      declarationType: CLASS
  # add no arg constructors forced
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '.*Named.*EstatioSharedKernelPartyModule.*MODULE_NAMESPACE.*Permit.*'
      annotationType: lombok.NoArgsConstructor
      annotationTemplate: '@NoArgsConstructor(force = true)'
      declarationType: CLASS
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '.*Named.*PermitForIndex.*LOGICAL_TYPE_NAMED.*'
      annotationType: lombok.NoArgsConstructor
      annotationTemplate: '@NoArgsConstructor(force = true)'
      declarationType: CLASS
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '.*Named.*PermitForLease.*LOGICAL_TYPE_NAMED.*'
      annotationType: lombok.NoArgsConstructor
      annotationTemplate: '@NoArgsConstructor(force = true)'
      declarationType: CLASS
  - com.ecpnv.openrewrite.jdo2jpa.v2x.cleanup
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.cleanup
displayName: Cleanup
description: Run cleanup.
tags:
  - cleanup
recipeList:
  - com.ecpnv.openrewrite.java.ShortenFullyQualifiedTypeReferencesConditionally:
      excludePackages: lombok,org.estatio.module.atpath.dom,org.incode.module.classification.dom.impl.category,org.estatio.module.asset.dom,org.incode.module.document.dom.impl.docs,org.apache.isis.applib.value,org.apache.causeway.applib.value
  - com.ecpnv.openrewrite.java.ShortenFullyQualifiedAnnotation
  - com.ecpnv.openrewrite.java.RemovedUnusedImports
  # too soon
  #  - org.openrewrite.java.format.AutoFormat
  # This specific class has an inner class that extends from an abstract class defined in an interface and rewrite doesn't support this
  - com.ecpnv.openrewrite.java.AddImport:
      fullClassName: 'org.incode.module.communications.integtests.dom.communications.dom.demowithnotes.DemoObjectWithNotes_invoices'
      importFullClassName: 'org.incode.module.communications.EstatioSharedKernelCommunicationsModule'
  - com.ecpnv.openrewrite.java.RemoveAnnotationConditionally:
      matchByRegularExpression: '(@.*ManyToOne.*)|(@.*OneToMany.*)'
      matchByRegularExpressionForRemoval: '@Transient'
      fullyQualifiedType: org.estatio.module.party.dom.Party
      declarationType: VAR
  - com.ecpnv.openrewrite.java.RemoveAnnotationConditionally:
      matchByRegularExpression: '(@.*ManyToOne.*)|(@.*OneToMany.*)'
      matchByRegularExpressionForRemoval: '@Transient'
      fullyQualifiedType: org.estatio.module.asset.dom.Property
      declarationType: VAR
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.eclipselink
displayName: Migrate from JDO to JPA v2.x
description: This recipe applies EclipseLink specific migrations from JDO to JPA.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - eclipselink
preconditions:
  - com.ecpnv.openrewrite.jdo2jpa.v2x.acceptEntitiesAndServicesAndAnnotations
recipeList:
  - org.openrewrite.java.ReplaceAnnotation:
      annotationPatternToReplace: '@org.datanucleus.api.jdo.annotations.ReadOnly'
      annotationTemplateToInsert: '@org.eclipse.persistence.annotations.ReadOnly'
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.optional
displayName: JPA Optional migrations
description: This recipe applies optional migrations for JPA.
tags:
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
preconditions:
  - com.ecpnv.openrewrite.jdo2jpa.v2x.acceptEntities
recipeList:
  # Replace attribute length with precision for decimal fields when they do not have precision specified, but have a scale
  - com.ecpnv.openrewrite.java.ChangeAnnotationAttributeNameConditionally:
      matchByRegularExpression: '@Column\([^{]*?(?!precision)(?=.*?scale)[^}]*?\)'
      annotationType: javax.persistence.Column
      oldAttributeName: length
      newAttributeName: precision
  # Add an explicit default for decimal fields when they do not have precision specified, but have a scale
  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
      matchByRegularExpression: '@Column\([^{]*?(?!precision)(?=.*?scale)[^}]*?\)'
      annotationType: javax.persistence.Column
      attributeName: precision
      attributeValue: 19
      operation: ADD
      appendArray: false
  # Add @Enumerated(STRING) to enum field when one prefers to store Enum as string in the DB
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      annotationType: javax.persistence.Enumerated
      annotationTemplate: '@Enumerated(javax.persistence.EnumType.STRING)'
      declarationType: VAR
      kindOfClassToProcess: Enum
#  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
#      annotationType: javax.persistence.Enumerated
#      attributeValue: 'javax.persistence.EnumType.STRING'
#      operation: ADD
#      appendArray: false
