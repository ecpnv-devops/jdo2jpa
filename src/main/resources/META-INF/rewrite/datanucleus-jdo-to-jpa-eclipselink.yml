#
# This YAML defines a structured, step-by-step guide to migrate classes and code from JDO-specific annotations
# to their JPA equivalents.
#
# This is the main recipe to execute all recipes nessecary to migrate from JDO to JPA.
#
# @author Patrick Deenen @ Open Circle Solutions
#

---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x
displayName: Migrate from JDO to JPA v2.x
description: These recipes help migrate JDO applications using Datanucleus JDO to Java Persistence using JPA version v2.x (pre Jakarta persistence).
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
recipeList:
  - com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Persistent
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Column
  - org.openrewrite.java.ReplaceAnnotation:
      annotationPatternToReplace: '@javax.jdo.annotations.NotPersistent'
      annotationTemplateToInsert: '@javax.persistence.Transient'
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Unique
  - com.ecpnv.openrewrite.jdo2jpa.v2x.Inheritance
  # Post code changes
  - com.ecpnv.openrewrite.java.ShortenFullyQualifiedTypeReferencesConditionally:
      excludePackages: lombok,org.estatio.module.atpath.dom,org.incode.module.classification.dom.impl.category,org.estatio.module.asset.dom,org.apache.isis.applib.value,org.incode.module.document.dom.impl.docs
  - com.ecpnv.openrewrite.jdo2jpa.RemovedUnusedImportsSpringSupport
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.PersistenceCapable
displayName: Migrate JDO > JPA-v2.x for @PersistenceCapable
description: Migrate @PersistenceCapable to @Entity and @Table.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - PersistenceCapable
recipeList:
  - com.ecpnv.openrewrite.jdo2jpa.AddEntityAnnotation
  - com.ecpnv.openrewrite.jdo2jpa.ReplacePersistenceCapableWithTableAnnotation
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.PersistenceCapable'
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Persistent
displayName: Migrate JDO > JPA-v2.x for @Persistent
description: Migrate @Persistent to @OneToMany and @Column.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Persistent
recipeList:
  - com.ecpnv.openrewrite.jdo2jpa.ReplacePersistentWithManyToOneAnnotation:
      defaultCascade: 'CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH'
  - com.ecpnv.openrewrite.jdo2jpa.ReplacePersistentWithOneToManyAnnotation:
      defaultCascade: 'CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH, CascadeType.DETACH'
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Persistent
      attributeName: defaultFetchGroup
  - com.ecpnv.openrewrite.java.RemoveAnnotationWithoutAttributes:
      annotationType: '@javax.jdo.annotations.Persistent'
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Column
displayName: Migrate JDO > JPA-v2.x for @Column
description: Migrate @Column.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Persistent
recipeList:
  # replace @Column(..allowsNull..) with @Column(..nullable..)
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.jdo.annotations.Column
      oldAttributeName: allowsNull
      newAttributeName: nullable
  # Remove nullable = "true" as this is the default in JPA
  - com.ecpnv.openrewrite.java.RemoveAnnotationAttributeConditionally:
      matchByRegularExpression: '@Column\(.*nullable\s*=\s*"true".*\)'
      annotationType: javax.jdo.annotations.Column
      attributeName: nullable
  # Change nullable = "false" to nullable = false
  - com.ecpnv.openrewrite.java.AddOrUpdateAnnotationAttribute:
      annotationType: javax.jdo.annotations.Column
      attributeName: nullable
      oldAttributeValue: "false"
      attributeValue: false
      operation: UPDATE
      appendArray: false
  # replace 'jdbcType = "CLOB", sqlType = "LONGVARCHAR"' with @Lob
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Column\(.*jdbcType\s*=\s*"CLOB".*\)'
      annotationType: javax.persistence.Lob
      annotationTemplate: '@Lob'
      declarationType: VAR
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Column\(.*jdbcType\s*=\s*"CLOB".*\)'
      annotationType: javax.persistence.Lob
      annotationTemplate: '@Lob'
      declarationType: METHOD
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Column\(.*jdbcType\s*=\s*"CLOB".*\)'
      annotationType: javax.persistence.Lob
      annotationTemplate: '@Lob'
      declarationType: CLASS
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Column
      attributeName: jdbcType
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Column
      attributeName: sqlType
  # Change column type
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Column
      newFullyQualifiedTypeName: javax.persistence.Column
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Unique
displayName: Migrate JDO > JPA-v2.x for @Unique
description: Migrate @Unique and @Uniques.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Persistent
recipeList:
  # replace @Unique(..members..) with @Column(..columnNames..)
  - org.openrewrite.java.ChangeAnnotationAttributeName:
      annotationType: javax.jdo.annotations.Unique
      oldAttributeName: members
      newAttributeName: columnNames
  # remove unsupported attributes
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: table
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: deferred
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: columns
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.jdo.annotations.Unique
      attributeName: extensions
  # Change Unique type
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Unique
      newFullyQualifiedTypeName: javax.persistence.UniqueConstraint
  # Move annotation to other annotation attribute
  - com.ecpnv.openrewrite.java.MoveAnnotationsToAttribute:
      sourceAnnotationType: javax.persistence.UniqueConstraint
      targetAnnotationType: javax.persistence.Table
      targetAttributeName: uniqueConstraints
  # Remove @uniques
  - org.openrewrite.java.RemoveAnnotation:
      annotationPattern: '@javax.jdo.annotations.Uniques'
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.cleanup
displayName: Cleanup
description: Run cleanup.
tags:
  - cleanup
recipeList:
  - com.ecpnv.openrewrite.java.ShortenFullyQualifiedTypeReferencesConditionally:
      excludePackages: lombok,org.estatio.module.atpath.dom,org.incode.module.classification.dom.impl.category,org.estatio.module.asset.dom,org.apache.isis.applib.value,org.incode.module.document.dom.impl.docs
  - com.ecpnv.openrewrite.jdo2jpa.RemovedUnusedImportsSpringSupport
# too soon
#  - org.openrewrite.java.format.AutoFormat
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.test
displayName: Test
description: Run test.
tags:
  - test
recipeList:
  - com.ecpnv.openrewrite.jdo2jpa.AddEntityAnnotation
  - com.ecpnv.openrewrite.jdo2jpa.ExtendWithAbstractEntityForEntityAnnotation:
      extendsFullClassName: org.estatio.base.prod.dom.EntityAbstract
      libraryOfAbstractClassName: jdo2jpa-abstract
---
type: specs.openrewrite.org/v1beta/recipe
name: com.ecpnv.openrewrite.jdo2jpa.v2x.Inheritance
displayName: Migrate JDO > JPA-v2.x for @Discriminator
description: Migrate @Discriminator and @DiscriminatorStrategy.
tags:
  - jdo
  - jpa
  - migrate
  - modernize
  - java
  - javax
  - persistence
  - Persistent
recipeList:
  # Translate discriminator strategy of class name to discriminator values with the names of the classes
  # by copying @Discriminator from parent class to subclasses when omitted and use the subclass name
  - com.ecpnv.openrewrite.jdo2jpa.CopyDiscriminatorFromParent
  # Add @DiscriminatorColumn for every @Discriminator
  # Set discriminator column name: discriminator
  # Set discriminator column length: 255
  # Note that from v5.0.2 DataNucleus will use a discriminator by default for inheritance strategy single table
  - com.ecpnv.openrewrite.java.AddAnnotationConditionally:
      matchByRegularExpression: '@Discriminator.*'
      annotationType: javax.persistence.DiscriminatorColumn
      annotationTemplate: '@DiscriminatorColumn( name = "discriminator", length = 255)'
      declarationType: CLASS
  # Change type of @Discriminator to @DiscriminatorValue
  - org.openrewrite.java.ChangeType:
      oldFullyQualifiedTypeName: javax.jdo.annotations.Discriminator
      newFullyQualifiedTypeName: javax.persistence.DiscriminatorValue
  # Remove attributes which are not applicable
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: strategy
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: column
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: columns
  - org.openrewrite.java.RemoveAnnotationAttribute:
      annotationType: javax.persistence.DiscriminatorValue
      attributeName: indexed
# Remove @Inheritance from subclasses when strategy is the same
# Set inheritance strategy to the causeway default: table_per_class == new table for each class
